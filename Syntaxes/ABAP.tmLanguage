<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>fileTypes</key>
		<array>
			<string>abap</string>
			<string>ABAP</string>
		</array>
		<key>foldingStartMarker</key>
		<string>/\*\*|\{\s*$</string>
		<key>foldingStopMarker</key>
		<string>\*\*/|^\s*\}</string>
		<key>keyEquivalent</key>
		<string>^~A</string>
		<key>name</key>
		<string>ABAP</string>
		<key>patterns</key>
		<array>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.abap</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\*.*\n?</string>
				<key>name</key>
				<string>comment.line.full.abap</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.abap</string>
					</dict>
				</dict>
				<key>match</key>
				<string>".*\n?</string>
				<key>name</key>
				<string>comment.line.partial.abap</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?<![^\s])##.*?(?=([\.:,\s]))</string>
				<key>name</key>
				<string>comment.line.pragma.abap</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>'</string>
				<key>end</key>
				<string>'</string>
				<key>name</key>
				<string>string.quoted.single.abap</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>''</string>
						<key>name</key>
						<string>constant.character.escape.abap</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>(?i)^\s*(class|method|form)\s+(?=[a-z_][a-z_0-9])</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>storage.type.block.abap</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\s*\.\s*\n?</string>
				<key>name</key>
				<string>meta.block.begin.implementation.abap</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>(?=[A-Za-z_][A-Za-z0-9_]*)</string>
						<key>contentName</key>
						<string>entity.name.type.block.abap</string>
						<key>end</key>
						<string>(?![A-Za-z0-9_])</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#generic_names</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<dict>
				<key>match</key>
				<string>(?i)(endclass|endmethod|endform)</string>
				<key>name</key>
				<string>storage.type.block.end.abap</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?i)(&lt;[A-Za-z_][A-Za-z0-9_]*&gt;)</string>
				<key>name</key>
				<string>meta.variable.other.field.symbol.abap</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#keywords</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#abap_constants</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#operators</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#abaptypes</string>
			</dict>
		</array>
		<key>repository</key>
		<dict>
			<key>abap_constants</key>
			<dict>
				<key>match</key>
				<string>(?ix)\s(initial|null|space|abap_true|abap_false)\s</string>
				<key>name</key>
				<string>constant.language.abap</string>
			</dict>
			<key>abaptypes</key>
			<dict>
				<key>match</key>
				<string>(?ix)\s(string|xstring|any|clike|csequence|numeric|xsequence|c|n|i|p|f|d|t|x)(?=\s|\.)</string>
				<key>name</key>
				<string>support.type.abap</string>
			</dict>
			<key>arithmetic_operator</key>
			<dict>
				<key>match</key>
				<string>\s(\+|\-|\*|\*\*|/|%)\s</string>
				<key>name</key>
				<string>keyword.operator.arithmetic.abap</string>
			</dict>
			<key>comparison_operator</key>
			<dict>
				<key>match</key>
				<string>(?i)\s(&lt;|&gt;|&lt;\=|&gt;\=|\=|&lt;&gt;|eq|ne|lt|le|gt|ge|cs)\s</string>
				<key>name</key>
				<string>keyword.operator.comparison.abap</string>
			</dict>
			<key>control_keywords</key>
			<dict>
				<key>match</key>
				<string>(?ix)(^|\s)(
	        at|case|catch|continue|do|elseif|else|endat|endcase|enddo|endif|
	        endloop|endon|if|loop|on|raise|try
			 )(?=\s|\.|:)</string>
				<key>name</key>
				<string>keyword.control.flow.abap</string>
			</dict>
			<key>generic_names</key>
			<dict>
				<key>match</key>
				<string>[A-Za-z_][A-Za-z0-9_]*</string>
			</dict>
			<key>hyphenated_keywords</key>
			<dict>
				<key>match</key>
				<string>(?ix)(^|\s)(add-corresponding|
	         authority-check|
	         break-point|
	         class-data|
	         class-method|
	         class-methods|
	         divide-corresponding|
	         display-mode|
	         editor-call|
	         end-of-definition|
	         end-of-page|
	         end-of-selection|
	         field-groups|
	         field-symbols|
	         function-pool|
	         left-justified|
	         line-count|
	         line-size|
	         message-id|
	         move-corresponding|
	         multiply-corresponding|
	         new-line|
	         new-page|
	         new-section|
                 no-gap|
                 no-sign|
                 no-zero|
	         print-control|
	         read-only|
	         right-justified|
	         rp-provide-from-last|
	         select-options|
	         selection-screen|
	         start-of-selection|
	         subtract-corresponding|
	         syntax-check|
	         syntax-trace|
	         system-call|
	         top-of-page|
	         type-pool|
	         type-pools
			  )(?=\s|\.|:)</string>
				<key>name</key>
				<string>keyword.control.hyphenated.abap</string>
			</dict>
			<key>keywords</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#hyphenated_keywords</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#main_keywords</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#control_keywords</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#short_keywords</string>
					</dict>
				</array>
			</dict>
			<key>logical_operator</key>
			<dict>
				<key>match</key>
				<string>(?i)\s(is|not|or|and)\s</string>
				<key>name</key>
				<string>keyword.operator.arithmetic.abap</string>
			</dict>
			<key>main_keywords</key>
			<dict>
				<key>match</key>
				<string>(?ix)(^|\s)(
	        alias|aliases|append|ascending|assert|assign|assigning|
	        back|begin|binary|bound|byte|
	        call|changing|check|clear|close|cnt|collect|commit|character|
	        corresponding|communication|component|compute|concatenate|condense|constants|
	        controls|convert|create|currency|
	        data|descending|default|define|definition|deferred|delete|describe|detail|divide|
	        deleting|
	        end|endexec|endfunction|
	        endinterface|endmodule|
	        endprovide|endselect|endtry|endwhile|event|events|exec|exit|export|
	        exporting|extract|exception|exceptions|
	        fetch|fields|format|free|from|function|find|
	        generate|
	        hide|
	        import|importing|index|infotypes|initial|initialization|
	        interface|interfaces|input|insert|implementation|into|
	        leave|like|line|load|local|length|left|leading|
	        method|message|methods|modify|module|move|multiply|match|
	        object|obligatory|overlay|optional|others|occurrences|occurs|offset|
	        pack|parameters|perform|position|private|program|protected|provide|public|
	        radiobutton|raising|ranges|receive|receiving|redefinition|reference|refresh|regex|reject|results|
	        replace|report|reserve|restore|return|returning|rollback|read|
	        scan|scroll|search|select|separated|shift|single|skip|sort|sorted|split|standard| 
	        statics|step|stop|structure|submatches|submit|subtract|summary|suppress|section|
	        tables|table|times|titlebar|transfer|transformation|translate|types|type|
	        unassign|uline|unpack|update|using|
	        value|
	        when|while|window|write|where|with
			 )(?=\s|\.|:)</string>
				<key>name</key>
				<string>keyword.control.simple.abap</string>
			</dict>
			<key>math_operators</key>
			<dict>
				<key>match</key>
				<string>(?ix)\s(abs|sign|ceil|floor|trunc|frac|acos|asin|
	                atan|cos|sin|tan|cosh|sinh|tanh|exp|log|log10|sqrt)\(</string>
				<key>name</key>
				<string>keyword.operator.math.abap</string>
			</dict>
			<key>operators</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#other_operator</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#math_operators</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#string_operators</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#arithmetic_operator</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#comparison_operator</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#logical_operator</string>
					</dict>
				</array>
			</dict>
			<key>other_operator</key>
			<dict>
				<key>match</key>
				<string>\s(&amp;&amp;|\?\=)\s</string>
				<key>name</key>
				<string>keyword.operator.other.abap</string>
			</dict>
			<key>short_keywords</key>
			<dict>
				<key>match</key>
				<string>(?i)\s(add|all|in|get|of|put|ref|set|sum|to)(?=\s|\.|:)</string>
				<key>name</key>
				<string>keyword.control.short.abap</string>
			</dict>
			<key>string_operators</key>
			<dict>
				<key>match</key>
				<string>(?ix)\s(strlen|xstrlen|charlen|lines|numofchar|dbmaxlen)\(</string>
				<key>name</key>
				<string>keyword.operator.string.abap</string>
			</dict>
		</dict>
		<key>scopeName</key>
		<string>source.abap</string>
		<key>uuid</key>
		<string>0357FFB4-EFFF-4DE9-8371-B0F9C8DF1B21</string>
	</dict>
</plist>
